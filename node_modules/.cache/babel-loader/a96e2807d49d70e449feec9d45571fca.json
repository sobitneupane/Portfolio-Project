{"ast":null,"code":"var _jsxFileName = \"/Users/sobitneupane/Documents/Portfolio/sobitneupane.github.io/src/components/renderer/codeRenderer.js\";\n// Markdown.tsx\nimport ReactMarkdown from 'react-markdown';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport tsx from 'react-syntax-highlighter/dist/cjs/languages/prism/tsx';\nimport typescript from 'react-syntax-highlighter/dist/cjs/languages/prism/typescript';\nimport scss from 'react-syntax-highlighter/dist/cjs/languages/prism/scss';\nimport bash from 'react-syntax-highlighter/dist/cjs/languages/prism/bash';\nimport markdown from 'react-syntax-highlighter/dist/cjs/languages/prism/markdown';\nimport json from 'react-syntax-highlighter/dist/cjs/languages/prism/json';\nSyntaxHighlighter.registerLanguage('tsx', tsx);\nSyntaxHighlighter.registerLanguage('typescript', typescript);\nSyntaxHighlighter.registerLanguage('scss', scss);\nSyntaxHighlighter.registerLanguage('bash', bash);\nSyntaxHighlighter.registerLanguage('markdown', markdown);\nSyntaxHighlighter.registerLanguage('json', json);\nimport rangeParser from 'parse-numeric-range';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst syntaxTheme = docco;\nconst CodeMarkdownComponents = {\n  code(_ref) {\n    var _node$data;\n    let {\n      node,\n      inline,\n      className,\n      ...props\n    } = _ref;\n    const match = /language-(\\w+)/.exec(className || '');\n    const hasMeta = node === null || node === void 0 ? void 0 : (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.meta;\n    const applyHighlights = applyHighlights => {\n      if (hasMeta) {\n        var _node$data$meta;\n        const RE = /{([\\d,-]+)}/;\n        const metadata = (_node$data$meta = node.data.meta) === null || _node$data$meta === void 0 ? void 0 : _node$data$meta.replace(/\\s/g, '');\n        const strlineNumbers = (RE === null || RE === void 0 ? void 0 : RE.test(metadata)) ? RE === null || RE === void 0 ? void 0 : RE.exec(metadata)[1] : '0';\n        const highlightLines = rangeParser(strlineNumbers);\n        const highlight = highlightLines;\n        const data = highlight.includes(applyHighlights) ? 'highlight' : null;\n        return {\n          data\n        };\n      } else {\n        return {};\n      }\n    };\n    return match ? /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n      style: syntaxTheme,\n      language: match[1],\n      PreTag: \"div\",\n      className: \"codeStyle\",\n      showLineNumbers: true,\n      wrapLines: hasMeta ? true : false,\n      useInlineStyles: true,\n      lineProps: applyHighlights\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"code\", {\n      className: className,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n};\nexport default CodeMarkdownComponents;","map":{"version":3,"names":["ReactMarkdown","PrismLight","SyntaxHighlighter","tsx","typescript","scss","bash","markdown","json","registerLanguage","rangeParser","docco","syntaxTheme","CodeMarkdownComponents","code","node","inline","className","props","match","exec","hasMeta","data","meta","applyHighlights","RE","metadata","replace","strlineNumbers","test","highlightLines","highlight","includes"],"sources":["/Users/sobitneupane/Documents/Portfolio/sobitneupane.github.io/src/components/renderer/codeRenderer.js"],"sourcesContent":["// Markdown.tsx\nimport ReactMarkdown from 'react-markdown'\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport tsx from 'react-syntax-highlighter/dist/cjs/languages/prism/tsx'\nimport typescript from 'react-syntax-highlighter/dist/cjs/languages/prism/typescript'\nimport scss from 'react-syntax-highlighter/dist/cjs/languages/prism/scss'\nimport bash from 'react-syntax-highlighter/dist/cjs/languages/prism/bash'\nimport markdown from 'react-syntax-highlighter/dist/cjs/languages/prism/markdown'\nimport json from 'react-syntax-highlighter/dist/cjs/languages/prism/json'\n\nSyntaxHighlighter.registerLanguage('tsx', tsx)\nSyntaxHighlighter.registerLanguage('typescript', typescript)\nSyntaxHighlighter.registerLanguage('scss', scss)\nSyntaxHighlighter.registerLanguage('bash', bash)\nSyntaxHighlighter.registerLanguage('markdown', markdown)\nSyntaxHighlighter.registerLanguage('json', json)\nimport rangeParser from 'parse-numeric-range';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\n\nconst syntaxTheme = docco\n\nconst CodeMarkdownComponents = {\n  code({ node, inline, className, ...props }) {\n\n    const match = /language-(\\w+)/.exec(className || '')\n    const hasMeta = node?.data?.meta\n\n    const applyHighlights = (applyHighlights) => {\n      if (hasMeta) {\n        const RE = /{([\\d,-]+)}/\n        const metadata = node.data.meta?.replace(/\\s/g, '')\n        const strlineNumbers = RE?.test(metadata)\n          ? RE?.exec(metadata)[1]\n          : '0'\n        const highlightLines = rangeParser(strlineNumbers)\n        const highlight = highlightLines\n        const data = highlight.includes(applyHighlights)\n          ? 'highlight'\n          : null\n        return { data }\n      } else {\n        return {}\n      }\n    }\n\n    return match ? (\n      <SyntaxHighlighter\n        style={syntaxTheme}\n        language={match[1]}\n        PreTag=\"div\"\n        className=\"codeStyle\"\n        showLineNumbers={true}\n        wrapLines={hasMeta ? true : false}\n        useInlineStyles={true}\n        lineProps={applyHighlights}\n      />\n    ) : (\n      <code className={className} {...props} />\n    )\n  },\n}\n\nexport default CodeMarkdownComponents;"],"mappings":";AAAA;AACA,OAAOA,aAAa,MAAM,gBAAgB;AAC1C,SAASC,UAAU,IAAIC,iBAAiB,QAAQ,0BAA0B;AAC1E,OAAOC,GAAG,MAAM,uDAAuD;AACvE,OAAOC,UAAU,MAAM,8DAA8D;AACrF,OAAOC,IAAI,MAAM,wDAAwD;AACzE,OAAOC,IAAI,MAAM,wDAAwD;AACzE,OAAOC,QAAQ,MAAM,4DAA4D;AACjF,OAAOC,IAAI,MAAM,wDAAwD;AAEzEN,iBAAiB,CAACO,gBAAgB,CAAC,KAAK,EAAEN,GAAG,CAAC;AAC9CD,iBAAiB,CAACO,gBAAgB,CAAC,YAAY,EAAEL,UAAU,CAAC;AAC5DF,iBAAiB,CAACO,gBAAgB,CAAC,MAAM,EAAEJ,IAAI,CAAC;AAChDH,iBAAiB,CAACO,gBAAgB,CAAC,MAAM,EAAEH,IAAI,CAAC;AAChDJ,iBAAiB,CAACO,gBAAgB,CAAC,UAAU,EAAEF,QAAQ,CAAC;AACxDL,iBAAiB,CAACO,gBAAgB,CAAC,MAAM,EAAED,IAAI,CAAC;AAChD,OAAOE,WAAW,MAAM,qBAAqB;AAC7C,SAASC,KAAK,QAAQ,+CAA+C;AAAC;AAGtE,MAAMC,WAAW,GAAGD,KAAK;AAEzB,MAAME,sBAAsB,GAAG;EAC7BC,IAAI,OAAwC;IAAA;IAAA,IAAvC;MAAEC,IAAI;MAAEC,MAAM;MAAEC,SAAS;MAAE,GAAGC;IAAM,CAAC;IAExC,MAAMC,KAAK,GAAG,gBAAgB,CAACC,IAAI,CAACH,SAAS,IAAI,EAAE,CAAC;IACpD,MAAMI,OAAO,GAAGN,IAAI,aAAJA,IAAI,qCAAJA,IAAI,CAAEO,IAAI,+CAAV,WAAYC,IAAI;IAEhC,MAAMC,eAAe,GAAIA,eAAe,IAAK;MAC3C,IAAIH,OAAO,EAAE;QAAA;QACX,MAAMI,EAAE,GAAG,aAAa;QACxB,MAAMC,QAAQ,sBAAGX,IAAI,CAACO,IAAI,CAACC,IAAI,oDAAd,gBAAgBI,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;QACnD,MAAMC,cAAc,GAAG,CAAAH,EAAE,aAAFA,EAAE,uBAAFA,EAAE,CAAEI,IAAI,CAACH,QAAQ,CAAC,IACrCD,EAAE,aAAFA,EAAE,uBAAFA,EAAE,CAAEL,IAAI,CAACM,QAAQ,CAAC,CAAC,CAAC,CAAC,GACrB,GAAG;QACP,MAAMI,cAAc,GAAGpB,WAAW,CAACkB,cAAc,CAAC;QAClD,MAAMG,SAAS,GAAGD,cAAc;QAChC,MAAMR,IAAI,GAAGS,SAAS,CAACC,QAAQ,CAACR,eAAe,CAAC,GAC5C,WAAW,GACX,IAAI;QACR,OAAO;UAAEF;QAAK,CAAC;MACjB,CAAC,MAAM;QACL,OAAO,CAAC,CAAC;MACX;IACF,CAAC;IAED,OAAOH,KAAK,gBACV,QAAC,iBAAiB;MAChB,KAAK,EAAEP,WAAY;MACnB,QAAQ,EAAEO,KAAK,CAAC,CAAC,CAAE;MACnB,MAAM,EAAC,KAAK;MACZ,SAAS,EAAC,WAAW;MACrB,eAAe,EAAE,IAAK;MACtB,SAAS,EAAEE,OAAO,GAAG,IAAI,GAAG,KAAM;MAClC,eAAe,EAAE,IAAK;MACtB,SAAS,EAAEG;IAAgB;MAAA;MAAA;MAAA;IAAA,QAC3B,gBAEF;MAAM,SAAS,EAAEP,SAAU;MAAA,GAAKC;IAAK;MAAA;MAAA;MAAA;IAAA,QACtC;EACH;AACF,CAAC;AAED,eAAeL,sBAAsB"},"metadata":{},"sourceType":"module"}