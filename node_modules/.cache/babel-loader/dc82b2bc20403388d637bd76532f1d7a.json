{"ast":null,"code":"var _jsxFileName = \"/Users/sobitneupane/Documents/Portfolio/sobitneupane.github.io/src/components/renderer/codeRenderer.js\";\n// Markdown.tsx\nimport ReactMarkdown from 'react-markdown';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport rangeParser from 'parse-numeric-range';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst syntaxTheme = docco;\nconst CodeMarkdownComponents = {\n  code(_ref) {\n    let {\n      node,\n      inline,\n      className,\n      children,\n      ...props\n    } = _ref;\n    const match = /language-(\\w+)/.exec(className || \"\");\n    return !inline && match ? /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n      children: String(children).replace(/\\n$/, \"\"),\n      language: match[1],\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"code\", {\n      className: className,\n      ...props,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this);\n  }\n};\nexport default CodeMarkdownComponents;","map":{"version":3,"names":["ReactMarkdown","PrismLight","SyntaxHighlighter","rangeParser","docco","syntaxTheme","CodeMarkdownComponents","code","node","inline","className","children","props","match","exec","String","replace"],"sources":["/Users/sobitneupane/Documents/Portfolio/sobitneupane.github.io/src/components/renderer/codeRenderer.js"],"sourcesContent":["// Markdown.tsx\nimport ReactMarkdown from 'react-markdown'\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport rangeParser from 'parse-numeric-range';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nconst syntaxTheme = docco\n\nconst CodeMarkdownComponents = {\n  code({ node, inline, className, children, ...props }) {\n    const match = /language-(\\w+)/.exec(className || \"\");\n    return !inline && match ? (\n      <SyntaxHighlighter\n        children={String(children).replace(/\\n$/, \"\")}\n        language={match[1]}\n        {...props}\n      />\n    ) : (\n        <code className={className} {...props}>\n          {children}\n        </code>\n      );\n    },\n}\n\nexport default CodeMarkdownComponents;"],"mappings":";AAAA;AACA,OAAOA,aAAa,MAAM,gBAAgB;AAC1C,SAASC,UAAU,IAAIC,iBAAiB,QAAQ,0BAA0B;AAC1E,OAAOC,WAAW,MAAM,qBAAqB;AAC7C,SAASC,KAAK,QAAQ,+CAA+C;AAAC;AAEtE,MAAMC,WAAW,GAAGD,KAAK;AAEzB,MAAME,sBAAsB,GAAG;EAC7BC,IAAI,OAAkD;IAAA,IAAjD;MAAEC,IAAI;MAAEC,MAAM;MAAEC,SAAS;MAAEC,QAAQ;MAAE,GAAGC;IAAM,CAAC;IAClD,MAAMC,KAAK,GAAG,gBAAgB,CAACC,IAAI,CAACJ,SAAS,IAAI,EAAE,CAAC;IACpD,OAAO,CAACD,MAAM,IAAII,KAAK,gBACrB,QAAC,iBAAiB;MAChB,QAAQ,EAAEE,MAAM,CAACJ,QAAQ,CAAC,CAACK,OAAO,CAAC,KAAK,EAAE,EAAE,CAAE;MAC9C,QAAQ,EAAEH,KAAK,CAAC,CAAC,CAAE;MAAA,GACfD;IAAK;MAAA;MAAA;MAAA;IAAA,QACT,gBAEA;MAAM,SAAS,EAAEF,SAAU;MAAA,GAAKE,KAAK;MAAA,UAClCD;IAAQ;MAAA;MAAA;MAAA;IAAA,QAEZ;EACH;AACJ,CAAC;AAED,eAAeL,sBAAsB"},"metadata":{},"sourceType":"module"}